# -*- coding: utf-8 -*-
"""MlModelsHelper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nrTVql5uZNc_4mFaAO5RP2_CWqLOT6Bg
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, r2_score, mean_squared_error
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Linear Regression
def train_linear_regression(X_train, y_train):
    """Trains a Linear Regression model"""
    model = LinearRegression()
    model.fit(X_train, y_train)
    return model

def predict_linear_regression(model, X_test):
    """Makes predictions using a trained Linear Regression model"""
    return model.predict(X_test)

def evaluate_linear_regression(model, X_test, y_test):
    """Evaluates the Linear Regression model using R2 score and MSE"""
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    print(f"R2 Score: {r2}")
    print(f"Mean Squared Error: {mse}")
    return r2, mse

# Logistic Regression
def train_logistic_regression(X_train, y_train, penalty='l2', C=1.0, solver='lbfgs'):
    """Trains a Logistic Regression model with customizable penalty and regularization strength"""
    model = LogisticRegression(penalty=penalty, C=C, solver=solver, max_iter=1000)
    model.fit(X_train, y_train)
    return model

def predict_logistic_regression(model, X_test):
    """Makes predictions using a trained Logistic Regression model"""
    return model.predict(X_test)

def evaluate_logistic_regression(model, X_test, y_test):
    """Evaluates the Logistic Regression model using accuracy, confusion matrix, and classification report"""
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    print(f"Accuracy: {accuracy}")
    print(f"Confusion Matrix:\n{cm}")
    print(f"Classification Report:\n{report}")
    return accuracy, cm, report

# SVM (Support Vector Machine)
def train_svm(X_train, y_train, kernel='rbf', C=1.0, gamma='scale'):
    """Trains a Support Vector Machine model"""
    model = SVC(kernel=kernel, C=C, gamma=gamma)
    model.fit(X_train, y_train)
    return model

def predict_svm(model, X_test):
    """Makes predictions using a trained SVM model"""
    return model.predict(X_test)

def evaluate_svm(model, X_test, y_test):
    """Evaluates the SVM model using accuracy, confusion matrix, and classification report"""
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    print(f"Accuracy: {accuracy}")
    print(f"Confusion Matrix:\n{cm}")
    print(f"Classification Report:\n{report}")
    return accuracy, cm, report

# Random Forest - Classification and Regression
def train_random_forest_classifier(X_train, y_train, n_estimators=100):
    """Trains a Random Forest Classifier"""
    model = RandomForestClassifier(n_estimators=n_estimators)
    model.fit(X_train, y_train)
    return model

def predict_random_forest_classifier(model, X_test):
    """Makes predictions using a trained Random Forest Classifier"""
    return model.predict(X_test)

def evaluate_random_forest_classifier(model, X_test, y_test):
    """Evaluates the Random Forest Classifier using accuracy, confusion matrix, and classification report"""
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    print(f"Accuracy: {accuracy}")
    print(f"Confusion Matrix:\n{cm}")
    print(f"Classification Report:\n{report}")
    return accuracy, cm, report

def train_random_forest_regressor(X_train, y_train, n_estimators=100):
    """Trains a Random Forest Regressor"""
    model = RandomForestRegressor(n_estimators=n_estimators)
    model.fit(X_train, y_train)
    return model

def predict_random_forest_regressor(model, X_test):
    """Makes predictions using a trained Random Forest Regressor"""
    return model.predict(X_test)

def evaluate_random_forest_regressor(model, X_test, y_test):
    """Evaluates the Random Forest Regressor using R2 score and MSE"""
    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)
    print(f"R2 Score: {r2}")
    print(f"Mean Squared Error: {mse}")
    return r2, mse

# Unsupervised Learning - KMeans Clustering
def train_kmeans(X_train, n_clusters=3):
    """Trains a KMeans clustering model"""
    model = KMeans(n_clusters=n_clusters, random_state=42)
    model.fit(X_train)
    return model

def predict_kmeans(model, X_test):
    """Predicts the cluster for each data point"""
    return model.predict(X_test)

def evaluate_kmeans(model, X_train):
    """Evaluates KMeans model using inertia and silhouette score"""
    from sklearn.metrics import silhouette_score
    inertia = model.inertia_
    silhouette_avg = silhouette_score(X_train, model.labels_)
    print(f"Inertia: {inertia}")
    print(f"Silhouette Score: {silhouette_avg}")
    return inertia, silhouette_avg

# Dimensionality Reduction - PCA
def apply_pca(X, n_components=2):
    """Applies PCA for dimensionality reduction"""
    pca = PCA(n_components=n_components)
    X_pca = pca.fit_transform(X)
    return X_pca

def plot_pca(X_pca, labels=None):
    """Plots the first two PCA components"""
    plt.scatter(X_pca[:, 0], X_pca[:, 1], c=labels)
    plt.xlabel('PC 1')
    plt.ylabel('PC 2')
    plt.title('PCA Result')
    plt.show()

# Utility Functions
def train_test_split_data(X, y, test_size=0.2, random_state=42):
    """Splits data into training and testing sets"""
    return train_test_split(X, y, test_size=test_size, random_state=random_state)

def cross_validate_model(model, X, y, cv=5):
    """Performs cross-validation on the model"""
    scores = cross_val_score(model, X, y, cv=cv)
    print(f"Cross-Validation Scores: {scores}")
    print(f"Mean Score: {scores.mean()}")
    return scores

def scale_features(X_train, X_test):
    """Scales features using StandardScaler"""
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    return X_train_scaled, X_test_scaled

